/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package chess;

import chess.bot.ChessBot;
import chess.connection.LichessAPI;
import chess.model.Profile;
import chess.connection.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Map;
import chess.engine.*;
import main.java.datastructureproject.init.*;
import main.java.datastructureproject.algorithms.*;
import java.util.*;
import main.java.datastructureproject.algorithms.*;

public class App {

    public static void main(String[] args) throws Exception {

        /*Map<String, String> env = System.getenv();
        String token = null;
        boolean isLichess = false;
        // Parse passed parameters.
        for (String arg : args) {
            if (arg.contains("--lichess")) {
                isLichess = true;
                if (env.containsKey("LICHESS_TOKEN")) {
                    token = env.get("LICHESS_TOKEN");
                }
            }
            if (arg.contains("--token=")) {
                token = arg.substring(8);
            }
        }
        
        /*
        You need to place your bot implementation to the variable below.
        Make sure it implements the interface ChessBot, and don't change the variable name!
        */
        /*ChessBot bot = new Bot(); // Your bot here!

        if (isLichess) {
            if (token == null) {
                throw new Error("No token found");
            }
            LichessAPI api = new LichessAPI(bot, token);
            Profile myProfile = api.getAccount();
            System.out.println("Profile ID: " + myProfile.id);
            api.beginEventLoop();
            
        } else {

            Long initialTime = System.currentTimeMillis();
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            while (System.currentTimeMillis() - initialTime < 2500 && !in.ready()) {
                Thread.sleep(25);
            }

            if (in.ready()) {
                String input = in.readLine();
                if (input.equalsIgnoreCase("xboard")) {
                    XBoardHandler xb = new XBoardHandler(bot, in);
                    xb.run();
                }
            }
        } //*/

        // Just random tests done on the fly to see if everything works as intended so ignore these for now
        
        Board a = new Board();
        

        /*a.doMove(a.convertBackFromUCI("b1c3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c7c6"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d2d4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d8a5"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("g1f3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d7d6"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("e2e4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c8g4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c1d2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("f7f6"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c3e2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("a5b5"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("a1b1"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("g4f3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("g2f3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("b5a4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("e2c3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("a4d4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c3e2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d4a4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("e2c3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("a4d4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c3e2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d4a4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("b1a1"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("a4b5"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("e2g3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("b5b2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("a2a4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("b7b6"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("a1b1"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("b2d4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c2c3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d4c5"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d2e3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c5c3"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("e3d2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c3d4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("g3e2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d4c4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("e2c1"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c4d4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c1e2"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d4c4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("e2c1"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("c4a4"), a.returnBoard());
        a.doMove(a.convertBackFromUCI("d1a4"), a.returnBoard());*/
        a.returnBoard()[6][0] = "";
        a.returnBoard()[1][1] = "";
        a.returnBoard()[3][0] = "p";
        a.returnBoard()[3][1] = "P";
        a.doMove("3021+", a.returnBoard());
        a.undoMove("3021+", a.returnBoard(), "P");
        String[][] b = a.returnBoard();
        
        
        for (int i = 0; i < 8; i++) {
            //Collections.reverse(Arrays.asList(b[i]));
            System.out.println(Arrays.toString(b[i]));
        }
        System.out.println();
        

        
        
        //System.out.println((b[7][3]));
        /*String str = "f3h5";
        System.out.println(moves.convertBackFromUCI(str));
        String jotai = "x";
        System.out.println(jotai.charAt(0));
        String g = "e1h4";
        String usc = moves.convertBackFromUCI(g);
        System.out.println(usc + " usc");
        System.out.println(b[7][4] + "  paikka");
        /*a.doMove("0372");
        for (int i = 0; i < 8; i++) {
            System.out.println(Arrays.toString(a.returnBoard()[i]));
        }
        System.out.println(moves.isKingInCheck(a.returnBoard()));*/
        
    }
}
